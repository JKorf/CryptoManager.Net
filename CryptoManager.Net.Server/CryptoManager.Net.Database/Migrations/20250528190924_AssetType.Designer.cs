// <auto-generated />
using System;
using CryptoManager.Net.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CryptoManager.Net.Database.Migrations
{
    [DbContext(typeof(TrackerContext))]
    [Migration("20250528190924_AssetType")]
    partial class AssetType
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CryptoManager.Net.Database.Models.AssetStats", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Asset")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AssetType")
                        .HasColumnType("int");

                    b.Property<decimal?>("ChangePercentage")
                        .HasPrecision(12, 4)
                        .HasColumnType("decimal(12,4)");

                    b.Property<string>("Exchange")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Value")
                        .HasPrecision(28, 8)
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal>("Volume")
                        .HasPrecision(28, 8)
                        .HasColumnType("decimal(28,8)");

                    b.HasKey("Id");

                    b.HasIndex("Exchange");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("Exchange"), new[] { "Value", "Asset" });

                    b.HasIndex("Exchange", "Asset");

                    b.ToTable("AssetStats");
                });

            modelBuilder.Entity("CryptoManager.Net.Database.Models.ExchangeSymbol", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BaseAsset")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BaseAssetType")
                        .HasColumnType("int");

                    b.Property<decimal?>("ChangePercentage")
                        .HasPrecision(12, 4)
                        .HasColumnType("decimal(12,4)");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Exchange")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("HighPrice")
                        .HasPrecision(28, 8)
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal?>("LastPrice")
                        .HasPrecision(28, 8)
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal?>("LowPrice")
                        .HasPrecision(28, 8)
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal?>("MinNotionalValue")
                        .HasPrecision(28, 8)
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal?>("MinTradeQuantity")
                        .HasPrecision(28, 8)
                        .HasColumnType("decimal(28,8)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PriceDecimals")
                        .HasColumnType("int");

                    b.Property<int?>("PriceSignificantFigures")
                        .HasColumnType("int");

                    b.Property<decimal?>("PriceStep")
                        .HasPrecision(28, 8)
                        .HasColumnType("decimal(28,8)");

                    b.Property<int?>("QuantityDecimals")
                        .HasColumnType("int");

                    b.Property<decimal?>("QuantityStep")
                        .HasPrecision(28, 8)
                        .HasColumnType("decimal(28,8)");

                    b.Property<string>("QuoteAsset")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("QuoteAssetType")
                        .HasColumnType("int");

                    b.Property<decimal?>("QuoteVolume")
                        .HasPrecision(28, 8)
                        .HasColumnType("decimal(28,8)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("UsdVolume")
                        .HasPrecision(28, 2)
                        .HasColumnType("decimal(28,2)");

                    b.Property<decimal?>("Volume")
                        .HasPrecision(28, 8)
                        .HasColumnType("decimal(28,8)");

                    b.HasKey("Id");

                    b.HasIndex("QuoteAsset");

                    b.HasIndex("Exchange", "BaseAsset");

                    b.ToTable("Symbols");
                });

            modelBuilder.Entity("CryptoManager.Net.Database.Models.FiatPrice", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Price")
                        .HasPrecision(28, 8)
                        .HasColumnType("decimal(28,8)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("FiatPrices");
                });

            modelBuilder.Entity("CryptoManager.Net.Database.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpireTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("CryptoManager.Net.Database.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CryptoManager.Net.Database.Models.UserApiKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Environment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Exchange")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserApiKeys");
                });

            modelBuilder.Entity("CryptoManager.Net.Database.Models.UserBalance", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Asset")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Available")
                        .HasPrecision(28, 8)
                        .HasColumnType("decimal(28,8)");

                    b.Property<string>("Exchange")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Total")
                        .HasPrecision(28, 8)
                        .HasColumnType("decimal(28,8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserBalances");
                });

            modelBuilder.Entity("CryptoManager.Net.Database.Models.UserExternalBalance", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Asset")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Total")
                        .HasPrecision(28, 8)
                        .HasColumnType("decimal(28,8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserExternalBalances");
                });

            modelBuilder.Entity("CryptoManager.Net.Database.Models.UserOrder", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("AveragePrice")
                        .HasPrecision(28, 8)
                        .HasColumnType("decimal(28,8)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Exchange")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("OrderPrice")
                        .HasPrecision(28, 8)
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal?>("OrderQuantityBase")
                        .HasPrecision(28, 8)
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal?>("OrderQuantityQuote")
                        .HasPrecision(28, 8)
                        .HasColumnType("decimal(28,8)");

                    b.Property<int>("OrderSide")
                        .HasColumnType("int");

                    b.Property<int>("OrderType")
                        .HasColumnType("int");

                    b.Property<decimal?>("QuantityFilledBase")
                        .HasPrecision(28, 8)
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal?>("QuantityFilledQuote")
                        .HasPrecision(28, 8)
                        .HasColumnType("decimal(28,8)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("SymbolId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserOrders");
                });

            modelBuilder.Entity("CryptoManager.Net.Database.Models.UserQuickViewConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("SymbolId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserQuickViewConfigurations");
                });

            modelBuilder.Entity("CryptoManager.Net.Database.Models.UserTrade", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Exchange")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Fee")
                        .HasPrecision(28, 8)
                        .HasColumnType("decimal(28,8)");

                    b.Property<string>("FeeAsset")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasPrecision(28, 8)
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal?>("Quantity")
                        .HasPrecision(28, 8)
                        .HasColumnType("decimal(28,8)");

                    b.Property<int?>("Role")
                        .HasColumnType("int");

                    b.Property<int?>("Side")
                        .HasColumnType("int");

                    b.Property<string>("SymbolId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TradeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserTrade", (string)null);
                });

            modelBuilder.Entity("CryptoManager.Net.Database.Models.UserValuation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasPrecision(28, 8)
                        .HasColumnType("decimal(28,8)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserValuations");
                });

            modelBuilder.Entity("CryptoManager.Net.Database.Projections.ExchangeBalanceValue", b =>
                {
                    b.Property<string>("Asset")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Available")
                        .HasPrecision(28, 8)
                        .HasColumnType("decimal(28,8)");

                    b.Property<string>("Exchange")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Total")
                        .HasPrecision(28, 8)
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal>("UsdValue")
                        .HasPrecision(28, 8)
                        .HasColumnType("decimal(28,8)");

                    b.ToTable((string)null);

                    b.ToView(null, (string)null);
                });

            modelBuilder.Entity("CryptoManager.Net.Database.Projections.ExchangeUserValue", b =>
                {
                    b.Property<decimal>("UsdValue")
                        .HasPrecision(28, 8)
                        .HasColumnType("decimal(28,8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView(null, (string)null);
                });

            modelBuilder.Entity("CryptoManager.Net.Database.Projections.ExternalBalanceValue", b =>
                {
                    b.Property<string>("Asset")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Total")
                        .HasPrecision(28, 8)
                        .HasColumnType("decimal(28,8)");

                    b.Property<decimal>("UsdValue")
                        .HasPrecision(28, 8)
                        .HasColumnType("decimal(28,8)");

                    b.ToTable((string)null);

                    b.ToView(null, (string)null);
                });

            modelBuilder.Entity("CryptoManager.Net.Database.Models.UserApiKey", b =>
                {
                    b.HasOne("CryptoManager.Net.Database.Models.User", "User")
                        .WithMany("ApiKeys")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CryptoManager.Net.Database.Models.UserBalance", b =>
                {
                    b.HasOne("CryptoManager.Net.Database.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CryptoManager.Net.Database.Models.UserExternalBalance", b =>
                {
                    b.HasOne("CryptoManager.Net.Database.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CryptoManager.Net.Database.Models.UserOrder", b =>
                {
                    b.HasOne("CryptoManager.Net.Database.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CryptoManager.Net.Database.Models.UserQuickViewConfiguration", b =>
                {
                    b.HasOne("CryptoManager.Net.Database.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CryptoManager.Net.Database.Models.UserTrade", b =>
                {
                    b.HasOne("CryptoManager.Net.Database.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CryptoManager.Net.Database.Models.UserValuation", b =>
                {
                    b.HasOne("CryptoManager.Net.Database.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CryptoManager.Net.Database.Models.User", b =>
                {
                    b.Navigation("ApiKeys");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
