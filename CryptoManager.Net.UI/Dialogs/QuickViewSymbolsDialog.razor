@using CryptoManager.Net.UI.Models.ApiModels.Requests
@using CryptoManager.Net.UI.Models
@using CryptoManager.Net.UI.Services
@using CryptoManager.Net.UI.Services.Rest
@using System.Net
@inject ExchangeService ExchangeService
@inject SymbolService SymbolService
@inject QuickViewService QuickViewService

<MudDialog>
    <TitleContent>
        Quick View Configuration
    </TitleContent>
    <DialogContent>
        <MudStack Style="width: 450px">
            <MudStack Row="true" Style="width: 100%;" Justify="Justify.SpaceBetween">
                <MudSelect OuterClass="no-flex" Style="width: 140px;" T="string" ValueChanged="@(s=>OnExchangeChange(s))" Placeholder="Exchange" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Web" IconSize="Size.Medium" Class="mt-0">
                    @foreach (var exchange in _exchanges)
                    {
                        <MudSelectItem Value="@exchange" T="string">@exchange</MudSelectItem>
                    }
                </MudSelect>
                <MudTextField @bind-Value="_baseAsset" Class="no-flex mt-0" Style="margin-left: 10px;" Placeholder="Base asset" />
                <MudTextField @bind-Value="_quoteAsset" Class="no-flex mt-0" Style="margin-left: 10px;" Placeholder="Quote asset" />
            </MudStack>
            <MudText Style="color: red; height: 24px">@_error</MudText>
        </MudStack>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Success" OnClick="Submit">Add</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter]
    public string[] Exchanges { get; set; } = [];

    [CascadingParameter]
    private IMudDialogInstance? MudDialog { get; set; }

    private string? _exchange = null;
    private string? _baseAsset = null;
    private string? _quoteAsset = null;
    private string? _error = null;
    private ApiExchangeSymbols? _exchangeSymbols;
    private IEnumerable<string> _exchanges = Array.Empty<string>();

    protected override async Task OnInitializedAsync()
    {
        await ExchangeService.GetExchangeNamesAsync(
            data =>
            {
                _exchanges = data;
                return Task.CompletedTask;
            },
            error => Task.CompletedTask);
    }

    private async Task LoadSymbolsAsync()
    {
        if (_exchange == null)
            return;

        await SymbolService.GetSymbolNamesAsync(result =>
        {
            _exchangeSymbols = result;
            return Task.CompletedTask;
        }, null, _exchange);
    }


    private void OnExchangeChange(string text)
    {
        _exchange = text;
        _baseAsset = null;
        _quoteAsset = null;

        StateHasChanged();
        _ = LoadSymbolsAsync();
    }

    private async Task Submit() 
    {
        if (_exchangeSymbols == null || _baseAsset == null || _quoteAsset == null)
        {
            _error = "Symbol validation failed";
            return;
        }

        if (!_exchangeSymbols.Symbols.TryGetValue(_baseAsset, out var quoteAssets))
        {
            _error = "Base asset for symbol not found, make sure the base asset is correct and traded on the exchange";
            return;
        }

        if (!quoteAssets.Contains(_quoteAsset))
        {
            _error = "Quote asset for symbol not found, make sure it's a valid pair";
            return;
        }

        await QuickViewService.AddSymbolAsync(result =>
        {
            return Task.CompletedTask;
        }, null, $"{_exchange}-{_baseAsset}-{_quoteAsset}");
        MudDialog!.Close(DialogResult.Ok(true));
    }

    private void Cancel() => MudDialog!.Cancel();

}
