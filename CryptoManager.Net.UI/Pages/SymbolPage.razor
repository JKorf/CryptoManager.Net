@page "/symbol/{SymbolId}"
@inject SymbolService SymbolService
@inject BalanceService BalanceService
@inject ExchangeService ExchangeService
@inject NavigationManager NavigationManager
@inject StreamService StreamService
@inject OrderService OrderService
@inject ISnackbar Snackbar
@using CryptoExchange.Net.SharedApis
@using CryptoManager.Net.Models.Response
@using CryptoManager.Net.UI.Services.Stream
@using Microsoft.AspNetCore.WebUtilities
@using CryptoManager.Net.UI.Models
@using CryptoManager.Net.UI.Services;
@using CryptoManager.Net.UI.Services.Rest
@implements IAsyncDisposable

@if (_lastTradePrice == null)
{
    @if (_symbol != null)
    {
        <PageTitle>@(_symbol?.Exchange).@(_symbol?.BaseAsset)/@(_symbol?.QuoteAsset) | CryptoManager.Net</PageTitle>
    }
}
else
{
    <PageTitle>@_lastTradePrice.Value.Normalize() | @(_symbol?.Exchange).@(_symbol?.BaseAsset)/@(_symbol?.QuoteAsset) | CryptoManager.Net</PageTitle>
}

<MudGrid Class="breadcrumbs" Spacing="0">
    <MudItem xs="8">
        <MudBreadcrumbs Items="breadcrumbs"></MudBreadcrumbs>
    </MudItem>    
</MudGrid>

<MudGrid>
    <MudItem xl="9" lg="8" md="12" sm="12" xs="12">
        <ChartComponent Symbol="_symbol"
            ShowDetails="true"
            @ref="_chartComponent" />

        <SymbolOrdersComponent @ref="ordersComponent" SymbolDetails="_symbol" />

    </MudItem>
    <MudItem xl="3" lg="4" md="12" sm="12" xs="12">
        <PlaceOrderComponent SymbolDetails="_symbol" BaseAssetBalance="_baseAssetBalance" QuoteAssetBalance="_quoteAssetBalance" OnOrderPlacement="(() => {})" />
        
        @if (_fees != null)
        {
            <MudPaper Style="margin-top: 10px; padding: 10px;">
                <MudText Typo="Typo.body1" Style="border-bottom: 1px solid #444; padding: 0 10px; margin: 0 -10px;">Fees</MudText>
                <MudStack Row="true" Justify="Justify.SpaceBetween" Style="margin: 10px;">
                    <MudText Style="font-size: 14px">Maker: @_fees.MakerFee%</MudText>
                    <MudText Style="font-size: 14px">Taker: @_fees.TakerFee%</MudText>
                </MudStack>
            </MudPaper>
        }

        <MudPaper Style="margin-top: 10px">
            <MudElement HtmlTag="div" Style="border-bottom: 1px solid #444; margin: 10px 0px; padding: 10px 10px 0px 10px">
                <MudElement HtmlTag="div" Style="@("display: inline-block; cursor:pointer; padding: 0 4px;" + (_showTrades ? "" : "border-bottom: 1px solid #eee;"))" @onclick="@(x => _showTrades = false)">
                    <MudText Typo="Typo.body1">orderbook</MudText>
                </MudElement>
                <MudElement HtmlTag="div" Style="@("display: inline-block; cursor:pointer; padding: 0 4px;" + (!_showTrades ? "" : "border-bottom: 1px solid #eee;"))" @onclick="@(x => _showTrades = true)">
                    <MudText Typo="Typo.body1">trades</MudText>
                </MudElement>
            </MudElement>
            @if (_showTrades)
            {
                <TradesComponent Connected="_tradesConnected"
                                 Loading="_tradesLoading"
                                 @ref="_tradesComponent"
                                 OnRetryConnect="ConnectTradesAsync" />
            }
            else
            {
                <OrderBookComponent Connected="_bookConnected"
                                    Loading="_bookLoading"
                                    QuoteAsset="@_symbol?.QuoteAsset" 
                                    @ref="_bookComponent"
                                    OnRetryConnect="ConnectOrderBookAsync" />
            }
        </MudPaper>
    </MudItem>
</MudGrid>


@code {
    [Parameter]
    public string SymbolId { get; set; } = string.Empty;

    private ChartComponent? _chartComponent;
    private SymbolOrdersComponent? ordersComponent;

    private TradesComponent? _tradesComponent;

    private OrderBookComponent? _bookComponent;
    private bool _bookLoading = true;
    private bool _bookConnected;

    private bool _tradesLoading = true;
    private bool _tradesConnected;

    private List<BreadcrumbItem> breadcrumbs = new List<BreadcrumbItem>();
    private ApiSymbolDetails? _symbol;
    private ApiExchangeFees? _fees;
    private decimal _baseAssetBalance;
    private decimal _quoteAssetBalance;
    private bool _showTrades = false;
    private string? _subbedSymbol;
    private decimal? _lastTradePrice;
    private Timer? _timer;

    protected override void OnInitialized()
    {
        _timer = new Timer(x => InvokeAsync(StateHasChanged), null, TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(5));
    }

    protected override async Task OnParametersSetAsync()
    {
        if (_subbedSymbol != null)
        {
            await StreamService.UnsubscribeToOrderBookAsync(_subbedSymbol);
            await StreamService.UnsubscribeToTickerAsync(_subbedSymbol);
            await StreamService.UnsubscribeTradeUpdatesAsync(_subbedSymbol);
            _subbedSymbol = null;
        }

        await SymbolService.GetSymbolDetailsAsync(
            data =>
            {
                _symbol = data;
                return Task.CompletedTask;
            },
            null,
            SymbolId);

        if (_symbol == null)
            return;

        var exTask = BalanceService.GetBalancesAsync(
            data =>
            {
                _baseAssetBalance = data.Items.FirstOrDefault()?.Available ?? 0;
                return Task.CompletedTask;
            },
            null, exchange: _symbol.Exchange, asset: _symbol.BaseAsset);

        var balTask = BalanceService.GetBalancesAsync(
            data =>
            {
                _quoteAssetBalance = data.Items.FirstOrDefault()?.Available ?? 0;
                return Task.CompletedTask;
            },
            null, exchange: _symbol.Exchange, asset: _symbol.QuoteAsset);

        var feesTask = ExchangeService.GetFeesAsync(
            data =>
            {
                _fees = data;
                return Task.CompletedTask;
            }, 
            x => Task.CompletedTask,
            _symbol.Exchange, _symbol.Id);
        await Task.WhenAll(exTask, balTask, feesTask);

        InitializeBreadcrumbs(_symbol.Name, _symbol.Id);

        var subTaskOrderbook = ConnectOrderBookAsync();
        var subTaskTrades = ConnectTradesAsync();

        var subTaskTicker = StreamService.SubscribeToTickerUpdatesAsync(SymbolId, data =>
        {
            _ = _chartComponent?.UpdateAsync(data);
        }, statusUpdate =>
        {
        });

        await Task.WhenAll(subTaskOrderbook, subTaskTicker, subTaskTrades);      

        _subbedSymbol = SymbolId;
    }

    private async Task<ApiResult> ConnectTradesAsync()
    {
        _tradesLoading = true;
        var result = await StreamService.SubscribeToTradeUpdatesAsync(SymbolId, data =>
        {
            _lastTradePrice = data.Last().Price;
            _bookComponent?.UpdateLastPrice(data.Last().Price);
            _tradesComponent?.Update(data);
        }, statusUpdate =>
        {
            _tradesConnected = statusUpdate.Status == SubscriptionStatus.Restored;
        });

        _tradesConnected = result.Success;
        _tradesLoading = false;
        return result;
    }

    private async Task<ApiResult> ConnectOrderBookAsync()
    {
        _bookLoading = true;
        var result = await StreamService.SubscribeToOrderBookUpdatesAsync(SymbolId, data =>
        {
            _bookComponent?.Update(data);
        }, statusUpdate =>
        {
            // TODO Apply to UI
            _bookConnected = statusUpdate.Status == SubscriptionStatus.Restored;
        });

        _bookConnected = result.Success;
        _bookLoading = false;
        return result;
    }

    private void InitializeBreadcrumbs(string symbolName, string symbolId)
    {
        var crumbs = new List<BreadcrumbItem>();
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var queryStrings = QueryHelpers.ParseQuery(uri.Query);
        if (queryStrings.TryGetValue("from", out var values))
        {
            foreach (var value in values)
            {
                var split = value!.Split('|');
                crumbs.Add(new BreadcrumbItem(split[0], href: split[1]));
            }
        }

        crumbs.Add(new BreadcrumbItem(symbolName, "/Symbol/" + symbolId));
        breadcrumbs = crumbs;
    }

    public async ValueTask DisposeAsync()
    {
        if (_subbedSymbol != null)
        {
            await StreamService.UnsubscribeToOrderBookAsync(_subbedSymbol);
            await StreamService.UnsubscribeToTickerAsync(_subbedSymbol);
            await StreamService.UnsubscribeTradeUpdatesAsync(_subbedSymbol);
        }

        _subbedSymbol = null;
        _timer?.Dispose();
    }
}
