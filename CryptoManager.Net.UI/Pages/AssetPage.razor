@page "/assets/{AssetName}"
@inject ExchangeService ExchangeService
@inject SymbolService SymbolService
@inject BalanceService BalanceService
@inject NavigationManager NavigationManager
@inject AuthStateProvider AuthProvider
@using CryptoManager.Net.UI.Authorization
@using Microsoft.AspNetCore.WebUtilities
@using CryptoManager.Net.UI.Models
@using CryptoManager.Net.UI.Services;
@using CryptoManager.Net.UI.Services.Rest

<PageTitle>@AssetName | CryptoManager.Net</PageTitle>

<MudGrid Class="breadcrumbs" Spacing="0">
    <MudItem xs="12">
        <MudBreadcrumbs Items="breadcrumbs"></MudBreadcrumbs>
    </MudItem>
</MudGrid>

<MudGrid Style="margin-top: 0px;">
    <MudItem xs="12" sm="12" md="12" lg="8" xl="7">
        <SymbolTableComponent Exchanges="_exchanges"
                              FailedToRetrieve="_symbolConnectionIssue"
                              OnExchangeChange="OnSymbolExchangeChange"
                              OnSearch="OnSearchSymbol"
                              OnSymbolClick="RowClickEvent"
                              OnTableReload="LoadSymbolsAsync"
                              @ref="_symbolTable"/>
    </MudItem>

    @if(AuthProvider.User != null)
    {
        <MudItem xs="12" sm="12" md="12" lg="4" xl="5">
            <BalancesTableComponent 
            Authenticated="true"
            Exchanges="_exchanges"
            FailedToRetrieve="_balanceConnectionIssue"
            IncludeExchange="true" 
            IncludeAsset="false"
            OnBalanceClick="BalanceRowClickEvent"
            OnTableReload="LoadBalancesAsync"
            OnExchangeChange="OnExchangeChange"
            @ref="_balanceTable" />
        </MudItem>
    }

</MudGrid>

@code {
    [Parameter]
    public string? AssetName { get; set; }

    private List<BreadcrumbItem> breadcrumbs = new List<BreadcrumbItem>();

    private SymbolTableComponent? _symbolTable;
    private BalancesTableComponent? _balanceTable;

    private string[] _exchanges = [];

    private string? _searchStringSymbol = null;
    private string? _balanceExchange = null;
    private string? _symbolExchange = null;

    private bool _symbolConnectionIssue;
    private bool _balanceConnectionIssue;

    private Page<ApiSymbol>? _symbolStats;
    private Page<ApiBalance>? _balances;

    protected override void OnParametersSet()
    {
        breadcrumbs = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("Assets", href: "/Assets"),
            new BreadcrumbItem($"{AssetName}", href: $"/Assets/{AssetName}"),
        };
    }

    protected override async Task OnInitializedAsync()
    {
        await ExchangeService.GetExchangeNamesAsync(
            data =>
            {
                _exchanges = data.ToArray();
                return Task.CompletedTask;
            },
            x => Task.CompletedTask);
    }

    private async Task<TableData<ApiSymbol>> LoadSymbolsAsync(TableState state)
    {
        await SymbolService.GetSymbolsAsync(data =>
        {
            _symbolStats = data;
            _symbolConnectionIssue = false;
            return Task.CompletedTask;
        },
        error =>
        {
            _symbolConnectionIssue = true;
            return Task.CompletedTask;
        },
        _searchStringSymbol,
        exchange: _symbolExchange,
        baseAsset: AssetName,
        minUsdVolume: 1,
        sort: state.SortLabel,
        sortDirection: state.SortDirection.ToString(),
        page: state.Page + 1,
        pageSize: state.PageSize);

        if (_symbolStats == null)
            return new TableData<ApiSymbol>() { Items = Array.Empty<ApiSymbol>(), TotalItems = 0 };

        return new TableData<ApiSymbol>() { Items = _symbolStats.Items, TotalItems = _symbolStats.TotalResults };
    }

    private async Task<TableData<ApiBalance>> LoadBalancesAsync(TableState state, bool refresh)
    {
        if (refresh)
        {
            await BalanceService.UpdateBalancesAsync(() => Task.CompletedTask, x =>
            {
                // TODO show error
                return Task.CompletedTask;
            });
        }

        await BalanceService.GetBalancesAsync(data =>
        {
            _balances = data;
            _balanceConnectionIssue = false;
            return Task.CompletedTask;
        },
        error =>
        {
            _balanceConnectionIssue = true;
            return Task.CompletedTask;
        },
        exchange: _balanceExchange,
        asset: AssetName,
        sort: state.SortLabel,
        sortDirection: state.SortDirection.ToString(),
        page: state.Page + 1,
        pageSize: state.PageSize);

        if (_balances == null)
            return new TableData<ApiBalance>() { Items = Array.Empty<ApiBalance>(), TotalItems = 0 };

        return new TableData<ApiBalance>() { Items = _balances.Items, TotalItems = _balances.TotalResults };
    }

    private void RowClickEvent(ApiSymbol symbol)
    {
        var crumbs = breadcrumbs.Select(x => x.Text + "|" + x.Href);
        var uri = $"Symbol/{symbol.Id}";
        foreach(var crumb in crumbs)
            uri = QueryHelpers.AddQueryString(uri, "from", crumb);
        NavigationManager.NavigateTo(uri);
    }

    private void BalanceRowClickEvent(ApiBalance balance)
    {
        var id = $"{balance.Exchange}-{balance.Asset}-USDT";

        var crumbs = breadcrumbs.Select(x => x.Text + "|" + x.Href);
        var uri = $"Symbol/{id}";
        foreach (var crumb in crumbs)
            uri = QueryHelpers.AddQueryString(uri, "from", crumb);
        NavigationManager.NavigateTo(uri);
    }

    private void OnExchangeChange(string exchange)
    {
        _balanceExchange = exchange;
        _balanceTable?.Reload();
    }

    private void OnSymbolExchangeChange(string exchange)
    {
        _symbolExchange = exchange;
        _symbolTable?.Reload();
    }

    private void OnSearchSymbol(string text)
    {
        _searchStringSymbol = text;
        _symbolTable?.Reload();
    }
}
