@page "/quick"
@inject ExchangeService ExchangeService
@inject SymbolService SymbolService
@inject BalanceService BalanceService
@inject NavigationManager NavigationManager
@inject AuthStateProvider AuthProvider
@inject QuickViewService QuickViewService
@inject IDialogService DialogService
@using CryptoManager.Net.UI.Authorization
@using CryptoManager.Net.UI.Dialogs
@using Microsoft.AspNetCore.WebUtilities
@using CryptoManager.Net.UI.Models
@using CryptoManager.Net.UI.Services;
@using CryptoManager.Net.UI.Services.Rest

<PageTitle>QuickView | CryptoManager.Net</PageTitle>

<MudGrid Class="breadcrumbs" Spacing="0">
    <MudItem xs="12">
        <MudStack Row="true" Justify="Justify.SpaceBetween">
            <MudBreadcrumbs Items="breadcrumbs"></MudBreadcrumbs>
            <MudIconButton Icon="@Icons.Material.Filled.Add" Disabled="@(_symbolIds.Length >= 8)" OnClick="OpenQuickViewConfig" />
        </MudStack>
    </MudItem>
</MudGrid>

@if (_symbolIds.Length == 0)
{
    <MudPaper Style="padding: 20px">
        No symbols configured
    </MudPaper>
}
<MudStack Row="true" Spacing="2" Wrap="Wrap.Wrap" StretchItems="StretchItems.All" Justify="Justify.FlexStart">
    @foreach(var symbol in _symbolIds)
    {
        <CompactSymbolComponent SymbolId="@symbol" OnRemove="async () => await RemoveAsync(symbol)" />
    }
</MudStack>

@code {
    private string[] _symbolIds = [];
    private List<BreadcrumbItem> breadcrumbs = new List<BreadcrumbItem>();

    protected override void OnParametersSet()
    {
        breadcrumbs = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("QuickView", href: "/quick")
        };
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadConfigAsync();
    }

    private async Task LoadConfigAsync()
    {
        await QuickViewService.GetSymbolsAsync(
            data =>
            {
                _symbolIds = data.ToArray();
                return Task.CompletedTask;
            },
            error => Task.CompletedTask);
    }

    private async Task RemoveAsync(string id)
    {
        await QuickViewService.RemoveSymbolAsync(
            x => Task.CompletedTask,
            x => Task.CompletedTask,
            id);

        await LoadConfigAsync();
        StateHasChanged();
    }

    private async Task OpenQuickViewConfig()
    {
        if (_symbolIds.Length >= 8)
            return;

        var result = await DialogService.ShowAsync<QuickViewSymbolsDialog>("Quick View Configuration", parameters: new DialogParameters<QuickViewSymbolsDialog>());
        var data = await result.Result;
        if (data!.Canceled)
            return;

        await LoadConfigAsync();
    }
}
