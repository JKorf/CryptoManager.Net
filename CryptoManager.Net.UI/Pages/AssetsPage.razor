@page "/assets"
@inject SymbolService SymbolService
@inject ExchangeService ExchangeService
@inject NavigationManager NavigationManager
@using CryptoManager.Net.UI.Models
@using CryptoManager.Net.UI.Services;
@using CryptoManager.Net.UI.Services.Rest

<PageTitle>Assets | CryptoManager.Net</PageTitle>

<MudGrid Class="breadcrumbs" Spacing="0">
    <MudItem xs="12">
        <MudBreadcrumbs Items="breadcrumbs"></MudBreadcrumbs>
    </MudItem>
</MudGrid>

<MudTable T="ApiAsset" ServerData="ServerReload" @ref="table" OnRowClick="RowClickEvent">
    <ToolBarContent>
        <MudTextField Style="max-width: 400px;" T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudSpacer />
        <MudSelect  T="string" ValueChanged="@(s=>OnExchangeChange(s))" Placeholder="Exchange" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Web" IconSize="Size.Medium" Class="mt-0">
            <MudSelectItem Value="@("All")" T="string"></MudSelectItem>
            @foreach (var exchange in exchanges)
            {
                <MudSelectItem Value="@exchange" T="string">@exchange</MudSelectItem>
            }
        </MudSelect>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh><MudTableSortLabel SortLabel="@nameof(ApiAsset.VolumeUsd)" InitialDirection="SortDirection.Descending" T="ApiAsset">Volume</MudTableSortLabel></MudTh>
        <MudTh>Price</MudTh>
        <MudTh Style="text-align:right"><MudTableSortLabel SortLabel="@nameof(ApiAsset.ChangePercentage)" T="ApiAsset">Price Change</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd Style="cursor: pointer" DataLabel="Name">@context.Name</MudTd>
        <MudTd Style="cursor: pointer" DataLabel="Volume">@((context.VolumeUsd ?? 0).ToString("C"))</MudTd>
        <MudTd Style="cursor: pointer" DataLabel="Price">$@(context.Value ?? 0)</MudTd>
        <MudTd  DataLabel="Price Change" Style="cursor: pointer; text-align:right"><ColorVal Value="@(Math.Round(context.ChangePercentage ?? 0, 2))" Suffix="%" /></MudTd>
    </RowTemplate>
    <NoRecordsContent>
        @if (_connectionIssues)
        {
            <MudText>Failed to retrieve assets</MudText>
        }
        else
        {
            <MudText>No assets found</MudText>
        }
    </NoRecordsContent>
    <LoadingContent>
        <LoaderComponent />
    </LoadingContent>
    <PagerContent>
        <MudTablePager HideRowsPerPage="true" />
    </PagerContent>
</MudTable>


@code {
    private MudTable<ApiAsset>? table;
    private string? searchString = null;
    private string? exchange = null;
    private bool _connectionIssues = false;

    private List<BreadcrumbItem> breadcrumbs = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Assets", href: "/Assets"),
    };

    private IEnumerable<string> exchanges = Array.Empty<string>();

    protected override async Task OnInitializedAsync()
    {
        await ExchangeService.GetExchangeNamesAsync(
            data =>
            {
                exchanges = data;
                return Task.CompletedTask;
            },
            error => Task.CompletedTask);
    }

    private async Task<TableData<ApiAsset>> ServerReload(TableState state, CancellationToken token)
    {
        Page<ApiAsset>? assets = null;
        await SymbolService.GetAssetsAsync(
            data =>
            {
                assets = data;
                _connectionIssues = false;
                return Task.CompletedTask;
            },
            x => 
            {
                _connectionIssues = true;
                return Task.CompletedTask;
            },
            searchString,
            exchange: exchange,
            sort: state.SortLabel,
            sortDirection: state.SortDirection.ToString(),
            page: state.Page + 1,
            pageSize: state.PageSize);

        if (assets == null)
            return new TableData<ApiAsset>() { Items = Array.Empty<ApiAsset>(), TotalItems = 0 };

        return new TableData<ApiAsset>() { Items = assets.Items, TotalItems = assets.TotalResults };
    }

    private void RowClickEvent(TableRowClickEventArgs<ApiAsset> tableRowClickEventArgs)
    {
        if (tableRowClickEventArgs.Item == null)
            return;

        NavigationManager.NavigateTo($"Assets/{tableRowClickEventArgs.Item.Name}");
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table?.ReloadServerData();
    }

    private void OnExchangeChange(string text)
    {
        exchange = text == "All" ? null : text;
        table?.ReloadServerData();
    }
}
