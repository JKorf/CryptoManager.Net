@page "/config"
@attribute [Authorize]

@inject ApiKeyService ApiKeyService
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject LoginService LoginService
@inject StreamService StreamService
@using CryptoManager.Net.UI.Authorization
@using CryptoManager.Net.UI.Models.ApiModels.Requests
@using CryptoManager.Net.UI.Services.Stream
@using Microsoft.AspNetCore.WebUtilities
@using CryptoManager.Net.UI.Models
@using CryptoManager.Net.UI.Services
@using CryptoManager.Net.UI.Dialogs
@using CryptoManager.Net.UI.Services.Rest

<PageTitle>Config | CryptoManager.Net</PageTitle>

<MudGrid Class="breadcrumbs" Spacing="0">
    <MudItem xs="12">
        <MudBreadcrumbs Items="breadcrumbs"></MudBreadcrumbs>
    </MudItem>
</MudGrid>

<MudGrid>
    <MudItem xs="12" md="8">
        <MudTable T="ApiApiKey" ServerData="ServerReloadKeys" @ref="keysTable">
            <ToolBarContent>
                <MudText Typo="Typo.h6">API keys</MudText>
                <MudSpacer />
                <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="(x) => AddKey()" />
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Exchange</MudTh>
                <MudTh>Environment</MudTh>
                <MudTh>Key</MudTh>
                <MudTh></MudTh>
                <MudTh Style="text-align:right"></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd Style="cursor: pointer" DataLabel="Exchange">@context.Exchange</MudTd>
                <MudTd Style="cursor: pointer" DataLabel="Key">@context.Environment</MudTd>
                <MudTd Style="cursor: pointer" DataLabel="Key">@GetDisplayKey(context.Key)</MudTd>
                <MudTd Style="cursor: pointer" DataLabel="Status"><span style="@(context.Invalid ? "color: red" : "")">@(context.Invalid ? "invalid" : "ok")</span></MudTd>
                <MudTd Style="cursor: pointer; text-align:right">
                    <MudStack Row="true" Justify="Justify.FlexEnd">
                        <MudButton  OnClick="() => Check(context)">Validate</MudButton>
                        <MudButton OnClick="() => Delete(context)">Delete</MudButton>
                    </MudStack>
                </MudTd>
            </RowTemplate>
            <NoRecordsContent>
                @if (_connectionIssues)
                {
                    <MudText>Failed to retrieve keys</MudText>
                }
                else
                {
                    <MudText>No API keys configured</MudText>
                }
            </NoRecordsContent>
            <LoadingContent>
                <LoaderComponent />
            </LoadingContent>
            <PagerContent>
                <MudTablePager HideRowsPerPage="true" />
            </PagerContent>
        </MudTable>
    </MudItem>

</MudGrid>

@code {
    [Parameter]
    public string? AssetName { get; set; }

    private List<BreadcrumbItem> breadcrumbs = new List<BreadcrumbItem>();
    private bool _connectionIssues;

    private MudTable<ApiApiKey>? keysTable;
    private Page<ApiApiKey>? keyData;
    private string[] _exchangeConfigured = [];

    protected override void OnParametersSet()
    {
        breadcrumbs = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("Config", href: "/Config"),
        };
    }

    protected override async Task OnInitializedAsync()
    {
        await ApiKeyService.GetConfiguredExchangesAsync(x =>
        {
            _exchangeConfigured = x;
            return Task.CompletedTask;
        }, x => Task.CompletedTask);
    }

    private async Task<TableData<ApiApiKey>> ServerReloadKeys(TableState state, CancellationToken token)
    {
        await ApiKeyService.GetApiKeysAsync(data =>
        {
            keyData = data;
            _connectionIssues = false;
            return Task.CompletedTask;
        },
        error =>
        {
            _connectionIssues = true;
            return Task.CompletedTask;
        }, state.Page + 1, state.PageSize);

        if (keyData == null)
            return new TableData<ApiApiKey>() { Items = Array.Empty<ApiApiKey>(), TotalItems = 0 };

        return new TableData<ApiApiKey>() { Items = keyData.Items, TotalItems = keyData.TotalResults };
    }

    private async Task Check(ApiApiKey key)
    {
        var loadingDialog = await DialogService.ShowAsync<LoadingDialog>();

        await ApiKeyService.ValidateApiKeyAsync(
            async data =>
            {
                await Task.Delay(500);
                ((LoadingDialog)loadingDialog.Dialog!).SetText("OK");
                await InvokeAsync(StateHasChanged);

                await Task.Delay(2000);
                loadingDialog.Close();
            }, 
            async data =>
            {
                await Task.Delay(500);
                ((LoadingDialog)loadingDialog.Dialog!).SetText("Invalid");
                await InvokeAsync(StateHasChanged);

                await Task.Delay(2000);
                loadingDialog.Close();
            },
            key.Id);

        await loadingDialog.Result;
        keysTable?.ReloadServerData();
    }

    private async Task Delete(ApiApiKey key)
    {
        if (!key.Invalid)
        {
            var confirmDialog = await DialogService.ShowAsync<MessageDialog>("Delete API key?", parameters: new DialogParameters<MessageDialog>
            {
                { x => x.Title, "Delete API key?" },
                { x => x.Message, $"Do you want to remove the API key for {key.Exchange}?" },
                { x => x.ShowCancel, true }
            });

            var result = await confirmDialog.Result;
            if ((bool?)result?.Data != true)
                return;
        }

        await ApiKeyService.RemoveApiKeyAsync(
            async () =>
            {
                await (keysTable?.ReloadServerData() ?? Task.CompletedTask);
            },
            null,
            key.Id);
    }

    private async Task AddKey()
    {
        var result = await DialogService.ShowAsync<ApiKeyDialog>("Add API key", parameters: new DialogParameters<ApiKeyDialog>
        {
            { x => x.ExchangeAlreadySet, _exchangeConfigured }
        });
        var data = await result.Result;
        if (data!.Canceled)
            return;

        var key = (AddApiKeyRequest)data.Data!;
        await ApiKeyService.AddApiKeyAsync(
            async () =>
            {
                await (keysTable?.ReloadServerData() ?? Task.CompletedTask);
                StreamService.TriggerReconnect(); // Trigger reconnect to include new API key for user subscriptions
                await LoginService.RefreshUserAsync();
            }, 
            null,
            key
            );
    }

    private string GetDisplayKey(string key)
    {
        if (key.Length <= 10)
            return key;

        return key[0..5] + " ..... " + key[^5..];
    }
}
