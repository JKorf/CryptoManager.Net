<MudTable T="ApiSymbol" ServerData="ServerReload" @ref="_table" OnRowClick="@((x) => OnSymbolClick(x.Item!))">
    <ToolBarContent>
        <MudTextField Style="max-width: 400px;" T="string" ValueChanged="@(s => OnSearch?.Invoke(s))" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudSpacer />
        @if(!ExcludedColumns.Contains(nameof(ApiSymbol.Exchange)))
        {
            <MudSelect T="string" ValueChanged="@(s=>OnExchangeChanged(s))" Placeholder="Exchange" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Web" IconSize="Size.Medium" Class="mt-0">
                <MudSelectItem Value="@("All")" T="string"></MudSelectItem>
                @foreach (var exchange in Exchanges)
                {
                    <MudSelectItem Value="@exchange" T="string">@exchange</MudSelectItem>
                }
            </MudSelect>
        }
    </ToolBarContent>
    <HeaderContent>
        @if (!ExcludedColumns.Contains(nameof(ApiSymbol.Exchange)))
        {
            <MudTh>Exchange</MudTh>
        }
        @if (!ExcludedColumns.Contains(nameof(ApiSymbol.Name)))
        {
            <MudTh>Name</MudTh>
        }
        @if (!ExcludedColumns.Contains(nameof(ApiSymbol.UsdVolume)))
        {
            <MudTh Style="text-align:right"><MudTableSortLabel SortLabel="@nameof(ApiSymbol.UsdVolume)" InitialDirection="SortDirection.Descending" T="ApiSymbol">Volume</MudTableSortLabel></MudTh>
        }
        @if (!ExcludedColumns.Contains(nameof(ApiSymbol.LastPrice)))
        {
            <MudTh Style="text-align:right">Price</MudTh>
        }
        @if (!ExcludedColumns.Contains(nameof(ApiSymbol.ChangePercentage)))
        {
            <MudTh Style="text-align:right"><MudTableSortLabel SortLabel="@nameof(ApiSymbol.ChangePercentage)" T="ApiSymbol">Price Change</MudTableSortLabel></MudTh>
        }
    </HeaderContent>
    <RowTemplate>
        @if (!ExcludedColumns.Contains(nameof(ApiSymbol.Exchange)))
        {
            <MudTd Style="cursor: pointer" DataLabel="Exchange">@context.Exchange</MudTd>
        }
        @if (!ExcludedColumns.Contains(nameof(ApiSymbol.Name)))
        {
            <MudTd Style="cursor: pointer" DataLabel="Name">@context.Name</MudTd>
        }
        @if (!ExcludedColumns.Contains(nameof(ApiSymbol.UsdVolume)))
        {
            <MudTd Style="cursor: pointer; text-align:right" DataLabel="Volume">@((context.UsdVolume ?? 0).ToString("C"))</MudTd>
        }
        @if (!ExcludedColumns.Contains(nameof(ApiSymbol.LastPrice)))
        {
            <MudTd Style="cursor: pointer; text-align:right" DataLabel="Price">@Formatters.FormatPrice(context.LastPrice)</MudTd>
        }
        @if (!ExcludedColumns.Contains(nameof(ApiSymbol.ChangePercentage)))
        {
            <MudTd DataLabel="Price Change" Style="cursor: pointer; text-align:right"><ColorVal Value="@(Math.Round(context.ChangePercentage ?? 0, 2))" Suffix="%" /></MudTd>
        }
    </RowTemplate>
    <NoRecordsContent>
        @if (FailedToRetrieve)
        {
            <MudText>Failed to retrieve symbols</MudText>
        }
        else
        {
            <MudText>No symbols found</MudText>
        }
    </NoRecordsContent>
    <LoadingContent>
        <LoaderComponent />
    </LoadingContent>
    <PagerContent>
        <MudTablePager HideRowsPerPage="true" />
    </PagerContent>
</MudTable>

@code {
    [Parameter]
    public bool FailedToRetrieve { get; set; }
    [Parameter]
    public string[] ExcludedColumns { get; set; } = [];
    [Parameter]
    public string[] Exchanges { get; set; } = [];
    [Parameter]
    public required Func<TableState, Task<TableData<ApiSymbol>>> OnTableReload { get; set; }
    [Parameter]
    public required Action<ApiSymbol> OnSymbolClick { get; set; }
    [Parameter]
    public Action<string?>? OnExchangeChange { get; set; }
    [Parameter]
    public Action<string?>? OnSearch { get; set; }

    private MudTable<ApiSymbol>? _table;

    public void Reload() => _table?.ReloadServerData();


    private async Task<TableData<ApiSymbol>> ServerReload(TableState state, CancellationToken token)
    {
        return await OnTableReload.Invoke(state);
    }

    private void OnSearched(string text)
    {
        OnSearch?.Invoke(text);
    }

    private void OnExchangeChanged(string text)
    {
        var exchange = text == "All" ? null : text;
        OnExchangeChange?.Invoke(exchange);
    }
}
