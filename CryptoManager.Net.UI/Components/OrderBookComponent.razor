@using CryptoManager.Net.Models.Response
@implements IDisposable

<MudPaper>
    @if (!Loading && !Connected)
    {
        <ErrorComponent Text="Failed to connect order book" ShowRetry="true" OnRetry="OnRetryConnect" />
    }
    else if (Loading || _book == null)
    {
        <LoaderComponent />
    }
    else
    {
        <MudSimpleTable Dense="true" Elevation="0" Class="no-overflow-table">
            <thead>
                <tr>
                    <td class="dense-header">Price</td>
                    <td class="dense-header" style="text-align: right;">Quantity</td>
                </tr>
            </thead>
            <tbody>
                @foreach (var ask in _book.Asks.OrderBy(x => x.Price).Take(Limit).Reverse())
                {
                    <tr>
                        <td width="120px" style="color: var(--mud-palette-success)">@Formatters.FormatPrice(ask.Price)</td>
                        <td style="padding-left: 10px; text-align: right;">@Formatters.FormatQuantity(ask.Quantity)</td>
                    </tr>
                }
            </tbody>
        </MudSimpleTable>
        <MudStack Row="true" Justify="Justify.SpaceBetween" Style="@(Compact ? "margin-top: -3px; padding: 0 15px" : "margin-top: -1px; padding: 8px 15px")">
            <MudElement HtmlTag="div">
                <MudText Style="font-size: 10px; color: #555">Last trade price</MudText>
                <MudText Typo="Typo.caption">@Formatters.FormatPrice(_lastPrice) @QuoteAsset</MudText>
            </MudElement>
            <MudElement HtmlTag="div">
                @if (!Compact)
                {
                    <MudText Style="font-size: 10px; color: #555; text-align: right;">Spread</MudText>
                    <MudText Typo="Typo.caption">
                            @(!_book.Asks.Any() ? "" : Formatters.Normalize(_book.Asks.Min(x => x.Price) - _book.Bids.Max(x => x.Price))) @QuoteAsset                    
                            <span>/ @(!_book.Asks.Any() ? "" : Math.Round(_book.Asks.Min(x => x.Price) / _book.Bids.Max(x => x.Price) * 100 - 100, 2).ToString("0.000")) %</span>
                    </MudText>
                }
            </MudElement>
        </MudStack>
        <MudSimpleTable Dense="true" Class="no-overflow-table">
            <tbody>
                @foreach (var ask in _book.Bids.OrderByDescending(x => x.Price).Take(Limit))
                {
                    <tr>
                        <td width="120px" style="color: var(--mud-palette-error)">@Formatters.FormatPrice(ask.Price)</td>
                        <td style="padding-left: 10px; text-align: right; ">@Formatters.FormatQuantity(ask.Quantity)</td>
                    </tr>
                }
            </tbody>
        </MudSimpleTable>
    }
</MudPaper>

@code {

    private object _bookLock = new object();
    private Timer? _timer;

    private ApiBook? _book;
    private decimal? _lastPrice;

    [Parameter]
    public int Limit { get; set; } = 7;
    [Parameter]
    public bool Compact { get; set; } = false;
    [Parameter]
    public string? QuoteAsset { get; set; }
    [Parameter]
    public bool Connected { get; set; }
    [Parameter]
    public bool Loading { get; set; }
    [Parameter]
    public Func<Task>? OnRetryConnect { get; set; }

    protected override void OnInitialized()
    {
        _timer = new Timer(x => InvokeAsync(StateHasChanged), null, TimeSpan.FromMilliseconds(200), TimeSpan.FromMilliseconds(200));
    }

    public void Update(ApiBook book)
    {
        _book = book;
    }

    public void UpdateLastPrice(decimal lastPrice)
    {
        _lastPrice = lastPrice;
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}
