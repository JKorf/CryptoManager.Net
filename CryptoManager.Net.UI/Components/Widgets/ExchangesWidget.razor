@using CryptoManager.Net.UI.Models
@using CryptoManager.Net.UI.Services
@inject ExchangeService ExchangeService

<MudPaper>
    <MudSimpleTable Dense="true">
        <thead>
            <tr>
                <th>
                    <MudStack Row="true">
                        @if (_connectionIssues)
                        {
                            <MudElement Style="">
                                <MudTooltip Text="Connection interrupted">
                                    <MudIcon Icon="@Icons.Material.Filled.Warning" Size="Size.Small"></MudIcon>
                                </MudTooltip>
                            </MudElement>
                        }
                        <MudText Style="font-size: 16px;color:  #666">exchanges</MudText>
                    </MudStack>
                </th>
                <th>symbols</th>
                <th style="text-align: right">volume</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var row in _exchanges)
            {
                <tr>
                    <td><a href="@("/exchanges/" + row.Exchange)">@row.Exchange</a></td>
                    <td>@row.Symbols</td>
                    <td style="text-align: right">@row.UsdVolume.ToString("C")</td>
                </tr>
            }
        </tbody>
    </MudSimpleTable>

    @if (!_exchanges.Any())
    {
        <LoaderComponent />
    }
</MudPaper>

@code {
    private IEnumerable<ApiExchange> _exchanges = new ApiExchange[0];
    private bool _connectionIssues;
    private Timer? _timer;

    protected override void OnInitialized()
    {
        _timer = new Timer(async (x) => await UpdateExchangesAsync(), null, TimeSpan.Zero, TimeSpan.FromSeconds(60));
    }

    private async Task UpdateExchangesAsync()
    {
        await ExchangeService.GetExchangesAsync(
            async data =>
            {
                _exchanges = data.Items;
                _connectionIssues = false;
                await InvokeAsync(StateHasChanged);
            },
            async error =>
            {
                _connectionIssues = true;
                await InvokeAsync(StateHasChanged);
            }, pageSize: 100);
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }

}
