@using CryptoManager.Net.UI.Models
@using CryptoManager.Net.UI.Services;
@using CryptoManager.Net.UI.Services.Rest
@inject SymbolService SymbolService
@implements IDisposable

<MudPaper>
    <MudSimpleTable Dense="true">
        <thead>
            <tr>
                <th>
                    <MudStack Row="true">
                        @if (_connectionIssues)
                        {
                            <MudElement Style="">
                                <MudTooltip Text="Connection interrupted">
                                    <MudIcon Icon="@Icons.Material.Filled.Warning" Size="Size.Small"></MudIcon>
                                </MudTooltip>
                            </MudElement>
                        }
                        <MudText Style="font-size: 16px;color:  #666">gainers</MudText>
                    </MudStack>
                </th>
                <th class="d-none d-sm-flex">price</th>
                <th>volume</th>
                <th style="text-align:right;">24h change</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var row in _assets)
            {
                <tr>
                    <td><a href="@("/Assets/" + row.Name)">@row.Name</a></td>
                    <td class="d-none d-sm-flex">$@Formatters.FormatPrice(row.Value)</td>
                    <td>@row.VolumeUsd?.ToString("c")</td>
                    <td style="text-align: right;"><ColorVal Value="@(Math.Round(row.ChangePercentage ?? 0, 2))" Suffix="%" /></td>
                </tr>
            }
        </tbody>
    </MudSimpleTable>

@if (!_assets.Any())
{
    <LoaderComponent />
}
</MudPaper>

@code {
    private IEnumerable<ApiAsset> _assets = Array.Empty<ApiAsset>();
    private bool _connectionIssues;

    private Timer? _timer;

    protected override void OnInitialized()
    {
        _timer = new Timer(async (x) => await UpdateBalanceAsync(), null, TimeSpan.Zero, TimeSpan.FromSeconds(60));
    }

    private async Task UpdateBalanceAsync()
    {
        await SymbolService.GetAssetsAsync(
            async data =>
            {
                _assets = data.Items;
                _connectionIssues = false;
                await InvokeAsync(StateHasChanged);
            },
            async error =>
            {
                _connectionIssues = true;
                await InvokeAsync(StateHasChanged);
            }, minUsdVolume: 1_000_000, assetType: AssetType.Crypto, pageSize: 4, sort: nameof(ApiAsset.ChangePercentage), sortDirection: "Descending");
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}
