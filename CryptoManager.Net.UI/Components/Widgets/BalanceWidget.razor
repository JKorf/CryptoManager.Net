@using CryptoManager.Net.UI.Models
@using CryptoManager.Net.UI.Services;
@using CryptoManager.Net.UI.Services.Rest
@inject BalanceService BalanceService
@implements IDisposable

<MudPaper Style="padding: 30px; position: relative">
    @if (_loading)
    {
        <LoaderComponent />
    }
    else
    {
        @if (_connectionIssues)
        {
            <MudElement Style="position: absolute; left: 10px; top: 10px;">
                <MudTooltip Text="Connection interrupted">
                    <MudIcon Icon="@Icons.Material.Filled.Warning" Size="Size.Small"></MudIcon>
                </MudTooltip>
            </MudElement>
        }
        <ValuationComponent AccountValue="_accountValue" />
    }

</MudPaper>

@code {
    private bool _loading;
    private ApiBalanceValuation? _accountValue = null;
    private Timer? _timer;
    private bool _connectionIssues = false;

    protected override void OnInitialized()
    {
        _timer = new Timer(async (x) => await UpdateBalanceAsync(), null, TimeSpan.Zero, TimeSpan.FromSeconds(60));
    }

    private async Task UpdateBalanceAsync()
    {
        _loading = true;
        await BalanceService.GetValueAsync(
            async data =>
            {
                _accountValue = data;
                _loading = false;
                _connectionIssues = false;
                await InvokeAsync(StateHasChanged);
            },
            async error =>
            {
                _loading = false;
                _connectionIssues = true;
                await InvokeAsync(StateHasChanged);
            });
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }

}
