@using CryptoExchange.Net.SharedApis
@using CryptoManager.Net.UI.Authorization
@using CryptoManager.Net.UI.Models
@using CryptoManager.Net.UI.Services;
@using CryptoManager.Net.UI.Services.Rest
@using CryptoManager.Net.UI.Services.Stream
@inject OrderService OrderService

<MudPaper>
    @if (Open){
        <MudTable T="ApiOrder" ServerData="ServerReloadOpen" @ref="_table">
            <HeaderContent>
                <MudTh><MudTableSortLabel SortLabel="@nameof(ApiOrder.CreateTime)" InitialDirection="SortDirection.Descending" T="ApiOrder">Time</MudTableSortLabel></MudTh>
                @if (IncludeSymbolInfo)
                {
                    <MudTh>Exchange</MudTh>
                    <MudTh>Symbol</MudTh>
                }
                <MudTh>Type</MudTh>
                <MudTh><MudTableSortLabel SortLabel="@nameof(ApiOrder.OrderSide)" T="ApiOrder">Side</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="@nameof(ApiOrder.OrderPrice)" T="ApiOrder">Order Price</MudTableSortLabel></MudTh>
                <MudTh Style="text-align:center"><MudTableSortLabel SortLabel="@nameof(ApiOrder.OrderQuantityBase)" T="ApiOrder">BaseAsset</MudTableSortLabel></MudTh>
                <MudTh Style="text-align:right"><MudTableSortLabel SortLabel="@nameof(ApiOrder.OrderQuantityQuote)" T="ApiOrder">QuoteAsset</MudTableSortLabel></MudTh>
                <MudTh Style=""></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd Style="cursor: pointer" @onclick="x => OrderClickEvent(context)" DataLabel="Timestamp">@(Formatters.ToLocalTime(context.CreateTime))</MudTd>
                @if (IncludeSymbolInfo)
                {
                    <MudTd Style="cursor: pointer" @onclick="x => OrderClickEvent(context)" DataLabel="Exchange">@context.SymbolId.Split('-')[0]</MudTd>
                    <MudTd Style="cursor: pointer" @onclick="x => OrderClickEvent(context)" DataLabel="Symbol">@context.SymbolId.Split('-')[1]/@context.SymbolId.Split('-')[2]</MudTd>
                }
                <MudTd Style="cursor: pointer" @onclick="x => OrderClickEvent(context)" DataLabel="Type">@(context.OrderType)</MudTd>
                <MudTd Style="cursor: pointer" @onclick="x => OrderClickEvent(context)" DataLabel="Side">@(context.OrderSide)</MudTd>
                <MudTd Style="cursor: pointer" @onclick="x => OrderClickEvent(context)" DataLabel="Limit Price">@(context.OrderPrice?.Normalize().ToString() ?? "-")</MudTd>
                <MudTd DataLabel="Filled Base" @onclick="x => OrderClickEvent(context)" Style="text-align:center;cursor: pointer">@(FormatQuantity(context.QuantityFilledBase, context.OrderQuantityBase, context.SymbolId.Split("-")[1]))</MudTd>
                <MudTd DataLabel="Filled Quote" @onclick="x => OrderClickEvent(context)" Style="text-align:right;cursor: pointer">@(FormatQuantity(context.QuantityFilledQuote, context.OrderQuantityQuote, context.SymbolId.Split("-")[2]))</MudTd>
                <MudTd Style="cursor: pointer" @onclick="x => CancelOrder(context)">@(context.Status == SharedOrderStatus.Open ? "Cancel" : "")</MudTd>
            </RowTemplate>
            <NoRecordsContent>
                @if (FailedToRetrieve)
                {
                    <MudText>Failed to retrieve orders</MudText>
                }
                else
                {
                    <MudText>@(!Authenticated ? "Unauthenticated" : "No orders found")</MudText>
                }
            </NoRecordsContent>
            <LoadingContent>
                <MudText>Loading...</MudText>
            </LoadingContent>
            <PagerContent>
                <MudTablePager HideRowsPerPage="true" />
            </PagerContent>
        </MudTable>
    }
    else
    {
        <MudTable T="ApiOrder" ServerData="ServerReloadOpen" @ref="_table">
            <HeaderContent>
                <MudTh><MudTableSortLabel SortLabel="@nameof(ApiOrder.CreateTime)" InitialDirection="SortDirection.Descending" T="ApiOrder">Time</MudTableSortLabel></MudTh>
                @if (IncludeSymbolInfo)
                {
                    <MudTh>Exchange</MudTh>
                    <MudTh>Symbol</MudTh>
                }
                <MudTh>Status</MudTh>
                <MudTh>Side</MudTh>
                <MudTh><MudTableSortLabel SortLabel="@nameof(ApiOrder.OrderPrice)" T="ApiOrder">Order Price</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="@nameof(ApiOrder.AveragePrice)" T="ApiOrder">Avg Fill Price</MudTableSortLabel></MudTh>
                <MudTh Style="text-align:center"><MudTableSortLabel SortLabel="@nameof(ApiOrder.OrderQuantityBase)" T="ApiOrder">BaseAsset</MudTableSortLabel></MudTh>
                <MudTh Style="text-align:right"><MudTableSortLabel SortLabel="@nameof(ApiOrder.OrderQuantityQuote)" T="ApiOrder">QuoteAsset</MudTableSortLabel></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd Style="cursor: pointer" @onclick="x => OrderClickEvent(context)" DataLabel="Timestamp">@(Formatters.ToLocalTime(context.CreateTime))</MudTd>
                @if (IncludeSymbolInfo)
                {
                    <MudTd Style="cursor: pointer" @onclick="x => OrderClickEvent(context)" DataLabel="Exchange">@context.SymbolId.Split('-')[0]</MudTd>
                    <MudTd Style="cursor: pointer" @onclick="x => OrderClickEvent(context)" DataLabel="Symbol">@context.SymbolId.Split('-')[1]/@context.SymbolId.Split('-')[2]</MudTd>
                }
                <MudTd Style="cursor: pointer" @onclick="x => OrderClickEvent(context)" DataLabel="Status">@context.Status</MudTd>
                <MudTd Style="cursor: pointer" @onclick="x => OrderClickEvent(context)" DataLabel="Side">@context.OrderSide</MudTd>
                <MudTd Style="cursor: pointer" @onclick="x => OrderClickEvent(context)" DataLabel="Limit Price">@(context.OrderPrice?.Normalize().ToString() ?? "-")</MudTd>
                <MudTd Style="cursor: pointer" @onclick="x => OrderClickEvent(context)" DataLabel="Avg Fill Price">@(context.AveragePrice?.ToString() ?? "-")</MudTd>
                <MudTd DataLabel="Filled Base" @onclick="x => OrderClickEvent(context)" Style="text-align:center;cursor: pointer">@(FormatQuantity(context.QuantityFilledBase, context.OrderQuantityBase, context.SymbolId.Split("-")[1]))</MudTd>
                <MudTd DataLabel="Filled Quote" @onclick="x => OrderClickEvent(context)" Style="text-align:right;cursor: pointer">@(FormatQuantity(context.QuantityFilledQuote, context.OrderQuantityQuote, context.SymbolId.Split("-")[2]))</MudTd>
            </RowTemplate>
            <NoRecordsContent>
                @if (FailedToRetrieve)
                {
                    <MudText>Failed to retrieve orders</MudText>
                }
                else
                {
                    <MudText>@(!Authenticated ? "Unauthenticated" : (EmptyMessage ?? "No orders found"))</MudText>
                }
            </NoRecordsContent>
            <LoadingContent>
                <MudText>Loading...</MudText>
            </LoadingContent>
            <PagerContent>
                <MudTablePager HideRowsPerPage="true" />
            </PagerContent>
        </MudTable>
    }
</MudPaper>

@code {
    [Parameter]
    public bool Open { get; set; }
    [Parameter]
    public bool IncludeSymbolInfo { get; set; }
    [Parameter]
    public bool FailedToRetrieve { get; set; }
    [Parameter]
    public bool Authenticated { get; set; }
    [Parameter]
    public required string EmptyMessage { get; set; }
    [Parameter]
    public required Func<TableState, Task<TableData<ApiOrder>>> OnTableReload { get; set; }
    [Parameter]
    public Func<ApiOrder, Task>? OnOrderCancel { get; set; }
    [Parameter]
    public required Func<ApiOrder, Task> OnOrderClick { get; set; }

    private MudTable<ApiOrder>? _table;

    public void Reload() => _table?.ReloadServerData();


    public string FormatQuantity(decimal? filled, decimal? total, string asset)
    {
        if (total == null && filled == null)
            return "-";

        if (total == null)
            return filled!.Value.Normalize().ToString() + " / - " + asset;

        if (filled == null)
            return "- / " + total!.Value.Normalize().ToString() + " " + asset;

        return filled!.Value.Normalize().ToString() + " / " + total!.Value.Normalize().ToString() + " " + asset;
    }

    private async Task<TableData<ApiOrder>> ServerReloadOpen(TableState state, CancellationToken token)
    {
        return await OnTableReload.Invoke(state);
    }

    private async Task OrderClickEvent(ApiOrder order)
    {
        await OnOrderClick.Invoke(order);
    }

    private async Task CancelOrder(ApiOrder order)
    {
        if (order.Status != SharedOrderStatus.Open || OnOrderCancel == null)
            return;

        await OnOrderCancel.Invoke(order);
    }
}
