@using CryptoManager.Net.Models.Response
@inject IJSRuntime JsRuntime

<MudPaper Style="padding: 10px 20px;">
    <MudGrid>
        <MudItem xs="12" sm="4">
            <MudStack Row="true">
                @if (Symbol != null)
                {
                    <MudText Style="font-size: 18px;line-height: 40px;">@Symbol.Exchange - @Symbol.Name</MudText>
                }
            </MudStack>
        </MudItem>
        <MudItem xs="12" sm="8">
            <MudGrid>
                <MudItem xs="6">
                    <MudStack Row="true">
                        <MudIcon Icon="@Icons.Material.Filled.ArrowUpward" Size="Size.Small" />
                        <MudText Typo="Typo.subtitle2" Style="font-size: 12px; line-height: 20px;">@(Formatters.FormatPrice(_ticker?.HighPrice)?.ToString() ?? "-") @Symbol?.QuoteAsset</MudText>
                    </MudStack>
                    <MudStack Row="true">
                        <MudIcon Icon="@Icons.Material.Filled.ArrowDownward" Size="Size.Small" />
                        <MudText Typo="Typo.subtitle2" Style="font-size: 12px; line-height: 20px;">@(Formatters.FormatPrice(_ticker?.LowPrice)?.ToString() ?? "-") @Symbol?.QuoteAsset</MudText>
                    </MudStack>
                </MudItem>
                <MudItem xs="6">
                    <MudStack Row="true" Justify="Justify.FlexEnd">
                        <MudIcon Icon="@Icons.Material.Filled.CompareArrows" Size="Size.Small" />
                        <MudText Typo="Typo.subtitle2" Style="font-size: 12px; line-height: 20px;">@(Formatters.FormatQuantity(_ticker?.Volume).ToString() ?? "-") @Symbol?.BaseAsset</MudText>
                    </MudStack>
                    <MudStack Row="true" Justify="Justify.FlexEnd">
                        <MudIcon Icon="@Icons.Material.Filled.ShowChart" Size="Size.Small" />
                        <MudText Typo="Typo.subtitle2" Style="font-size: 12px; line-height: 20px;"><ColorVal Value="@(_ticker?.ChangePercentage ?? 0)" Suffix="%" /></MudText>
                    </MudStack>
                </MudItem>
            </MudGrid>
        </MudItem>        
    </MudGrid>
</MudPaper>
<div id="@_containerId" style="height:400px; padding-bottom: 20px;" />

@code {
    [Parameter]
    public ApiSymbolDetails? Symbol { get; set; }

    [Parameter]
    public bool ShowDetails { get; set; }

    private string _containerId = Guid.NewGuid().ToString();
    private ApiTicker? _ticker;
    private bool _initialized = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!_initialized && Symbol != null)
        {
            await JsRuntime.InvokeVoidAsync("window.chart.show", Symbol!.Exchange.ToUpperInvariant() + ":" + Symbol.BaseAsset + Symbol.QuoteAsset, _containerId, ShowDetails);
            _initialized = true;
        }
    }

    public async Task UpdateAsync(ApiTicker ticker)
    {
        _ticker = ticker;
        await InvokeAsync(StateHasChanged);
    }
}
